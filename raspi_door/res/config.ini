# -*- coding: utf-8 -*-
#------------------------------------------------------------------------------
# file: $Id$
# auth: metagriffin <mg.github@metagriffin.net>
# date: 2014/09/27
# copy: (C) Copyright 2014-EOT metagriffin -- see LICENSE.txt
#------------------------------------------------------------------------------
# This software is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This software is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see http://www.gnu.org/licenses/.
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
#
# this is the `raspi-door` configuration file. see the raspi-door
# homepage for pretty much anything related to raspi-door at:
#
#   https://github.com/metagriffin/raspi-door
#
#------------------------------------------------------------------------------

[DEFAULT]

# `tz`
#   specifies the default timezone for all raspi-door services. it
#   should specify an `IANA TimeZone Database
#   <http://www.iana.org/time-zones>`_.
# default:
#   tz = UTC
tz                      = US/Eastern

# `locale`
#   specifies the localization locale to use for messages,
#   units, etc. currently, only ``en`` is supported.
# default:
#   locale = en
locale                  = en

# `mock`
#   sets the default `mock` state for all raspi-door services.
#   exactly what happens when a service is in `mock` mode depends on
#   the service; some will provide fake data, others will support a
#   different interface. see the specific service for details.
# default:
#   mock = false
mock                    = false

#------------------------------------------------------------------------------
[gui]

# `geometry`
#   specifies the door controller window geometry. it is either
#   WIDTHxHEIGHT or the string ``fullscreen``.
# default:
#   geometry = fullscreen
# example:
#   geometry = 240x320
geometry                = fullscreen

# `verbose`
#   controls the verbosity of raspi-door logging.
# default:
#   verbose = 0
verbose                 = 3

#------------------------------------------------------------------------------
[screen]

# `mock`
#   overrides the default `mock`

# `timeout`
#   specifies how long the screen should stay on after some
#   kind of action is detected.
# default:
#   timeout = 10s

# `init.exec`
#   specifies the shell command to run to initialize the screen. the
#   default assumes the framebuffer screen was installed as per the
#   raspi-door hardware tutorial.
# default:
#   echo 252 > /sys/class/gpio/export ;
#   echo out > /sys/class/gpio/gpio252/direction ;
#   echo 1 > /sys/class/gpio/gpio252/value ;

# `sleep.exec`
#   specifies the shell command to run when the screen should be put
#   to sleep. the default assumes the framebuffer screen was installed
#   as per the raspi-door hardware tutorial.
# default:
#   echo 0 > /sys/class/gpio/gpio252/value ;

# `wake.exec`
#   specifies the shell command to run when the screen should be woken
#   up. the default assumes the framebuffer screen was installed as
#   per the raspi-door hardware tutorial.
# default:
#   echo 1 > /sys/class/gpio/gpio252/value ;

#------------------------------------------------------------------------------
[lock]

# `mock`
#   overrides the default `mock`
#   note that for now, the `lock` service *only* works in mock mode...
mock                    = true

#------------------------------------------------------------------------------
[camera]

# todo: implement and/or document
fps                     = 10

#------------------------------------------------------------------------------
[clock]

# `mock`
#   overrides the default `mock`

# `tz`
#   overrides the default `tz`

# `format`
#   specifies the clocks display format. the default is equivalent to
#   "HH:MM" using 24-hour display, e.g. "15:46". note that the percent
#   symbol ('%') is special in INI configurations and must therefore
#   be escaped with an extra '%'.
# default:
#   format = %%H:%%M
# examples:
#   format = %%H:%%M:%%S

#------------------------------------------------------------------------------
[weather]

# `driver`
#   specifies which weather service to use. currently, only the
#   OpenWeatherMap.org service is available, so that's that.
# default:
#   driver = openweathermap

# `mock`
#   overrides the default `mock`

# `location`
#   specifies the name of the city & ISO 3166 country code to fetch
#   the weather for. For the OpenWeatherMap service, the format should
#   be "City, CountryCode". Note that this setting is overridden by
#   `location.id`. The default is Paris, France, because it is what a
#   city /could/ be.
# default:
#   location = Paris, FR
# examples:
#   location = New York City, US

# `location.id`
#   specifies the name of the weather service location ID to fetch the
#   weather for. This overrides any other location selection
#   mechanism, most specifically the `location` setting.
# examples:
#   location.id = 5128581

# `units`
#   specifies what system of measurements to use. please be smart and
#   use metric.
# default:
#   units = metric
# examples:
#   units = metric
#   units = imperial
#   units = kelvin

# `url`
#   specifies the URL of the weather service. Typically, this
#   should be left as-is and default to the driver's default.
# default:
#   url = <driver-specific>
# examples:
#   url = http://api.openweathermap.org/data/2.5

# `apikey`
#   specifies the APIKEY to use for the weather service.
# default:
#   apikey = <driver-specific>
# examples:
#   apikey = 0186ee1de078533203fc459fd05e3eed

# `interval`
#   specifies how frequently to check the weather (value units
#   defaults to seconds).
# default:
#   interval = 30m  # 30 minutes
# examples:
#   interval = 30m
#   interval = 1.5h
#   interval = 0.5d

# `datalog`
#   todo: implement & document
# default:
#   datalog = null
# examples:
#   datalog = /var/log/raspi-door/weather-data-log.csv

# `forecast.today.offset`
#   the weather service displays the current weather and the
#   forecasted weather. when it is still early in the day (based on
#   `tz`), this config sets how far in the future the forecast should
#   be for. for example, if the config is ``6h`` (6 hours, the
#   default), and it is 9 AM, then the forecast will be for 3 PM.
#   see `forecast.today.cutoff` for when tomorrow's forecast is
#   shown.
# default:
#   forecast.today.offset = 6h
# examples:
#   forecast.today.offset = 3h
#   forecast.today.offset = 30m

# `forecast.today.cutoff`
#   the weather service displays the current weather and the
#   forecasted weather. if the forecasted weather for today (based on
#   `forecast.today.offset`) is after this cutoff, then the forecast
#   for tomorrow is shown instead. the default (21h) means that if the
#   today's forecast is after 9 PM, then it will switch to tomorrow.
# default:
#   forecast.today.cutoff = 22h
# examples:
#   forecast.today.cutoff = 21h

# `forecast.tomorrow.offset`
#   the weather service displays the current weather and the
#   forecasted weather. if the forecasted weather displayed is for
#   tomorrow (based on `forecast.today.offset`), then this
#   configuration sets the time of the forecast. the default (12h)
#   will show the forecast for noon.
# default:
#   forecast.tomorrow.offset = 12h
# examples:
#   forecast.tomorrow.offset = 9h
#   forecast.tomorrow.offset = 14h

#------------------------------------------------------------------------------
[alert]

# `mock`
#   overrides the default `mock`
#   note that for now, the `alert` service *only* works in mock mode...
mock                    = true

# `message`
#   specifies the mock message, if `mock` is true. if empty or
#   null, then no message is displayed, even in mock mode.
# default:
#   message = null
# examples:
#   message = 20:30: Dinner with Jeffrey

#------------------------------------------------------------------------------
[sensor]

# `mock`
#   overrides the default `mock`

# gpio.led                = 18
# gpio.pir                = 22
# gpio.button             = 23

# `button.debounce`
#   specifies the time (in seconds) that successive button presses
#   will be ignored. this is needed because button presses don't
#   typically result in a very nice square wave (and thus a single
#   "on" pulse), but more like a spikey, jittery, series of
#   on/offs... normally, a value around 0.2 is good.
# default:
#   button.debounce = 0.2s
# example:
#   button.debounce = 0.1s

# the `sensor` service supports two types of actions to take when
# an event occurs. they are:
#
# * {EVENT}.play
#
#   specifies a path or an "asset-spec" to an audio file to play when
#   the given EVENT occurs. supported formats include WAV and OGG. if
#   you need to play other formats, such as MP3, see the `{EVENT}.exec`
#   option.
#
#   example:
#     bell.pressed.play = /path/to/audio/file.ogg
#
# * {EVENT}.exec
#
#   is the shell command to execute when the EVENT occurs. note that
#   it is executed in the background (with "&") and all stdout and
#   stderr is redirected to /dev/null.
#
#   example:
#     bell.pressed.exec = mpg321 /path/to/audio/file.mp3
#
# the available events:
#
# * `app.started`:
#   the application has started and initialized successfully
#   default:
#      app.started.play = raspi_door:res/audio/readytoserve.ogg
#
# * `bell.pressed`:
#   the bell button was pressed
#   default:
#     bell.pressed.play = raspi_door:res/audio/doorbell.ogg
#
# * `motion.started`:
#   interior motion was detected
#   default:
#     motion.started = null
#
# * `motion.stopped`:
#   interior motion is no longer being detected
#   default:
#     motion.stopped = null
#
# * `locknow.pressed`:
#   exterior lock button was pressed
#   default:
#     locknow.pressed = null
#
# * `nfc.read`:
#   rfid/nfc reader read an ID.
#
#   TODO: make the ID available as an environment variable and/or as
#         a parameter to the INI setting.
#
#   default:
#     nfc.read = null

#------------------------------------------------------------------------------
# end of $Id$
#------------------------------------------------------------------------------
